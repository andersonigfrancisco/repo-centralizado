import { Request, Response, RequestHandler } from 'express';
import { db1Service } from '../services/db1.service';
import { db2Service } from '../services/db2.service';

export const handleQuery: RequestHandler = async (req: Request, res: Response): Promise<void> => {
  const { database, operation, model, query } = req.body;

  const dbServices: { [key: string]: any } = {
    db1: db1Service,
    db2: db2Service
  };

  const operations: { [key: string]: Function } = {
    select: (service: any, model: string, query: any) => service[`find${capitalize(model)}`](query),
    insert: (service: any, model: string, query: any) => service[`add${capitalize(model)}`](query),
    update: (service: any, model: string, query: any) => service[`update${capitalize(model)}`](query.id, query.data),
    delete: (service: any, model: string, query: any) => service[`delete${capitalize(model)}`](query.id)
  };

  try {
    const service = dbServices[database];
    if (!service) throw new Error(`Database ${database} not supported`);

    const operationFunc = operations[operation];
    if (!operationFunc) throw new Error(`Operation ${operation} not supported`);

    const result = await operationFunc(service, model, query);

    res.json({ status: 'success', data: result });
  } catch (error) {
    console.error(error);
    res.status(500).json({ status: 'error', message: 'An error occurred while processing the request' });
  }
};

function capitalize(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
